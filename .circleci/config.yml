version: 2.1

executors:
  build:
    docker:
      - image: circleci/golang:1.14
  deploy:
    docker:
      - image: circleci/node:8.10

references:
  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

aliases:
- &restore_cache
  restore_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}
- &save_cache
  save_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}
    paths:
    - "/go/pkg/mod"

commands:
  check-uncommitted:
    description: Check for uncommitted changes.
    steps:
      - run:
          name: Check for uncomitted changes.
          command: |
            if [[ `git status --porcelain` ]]; then
              echo "ERROR: uncommitted changes"
              git status --porcelain
              exit 1
            fi
  install-golangci-lint:
    description: Install golangci-lint
    parameters:
      version:
        type: string
        default: 1.21.0
      gobin:
        type: string
        default: /go/bin
      prefix:
        type: string
        default: v1
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore golangci-lint cache
          keys: ['<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install golangci-lint
          command: |
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/golangci-lint && exit

            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b << parameters.gobin >>/ v<< parameters.version >>
      - save_cache:
          name: Save golangci-lint cache
          key: '<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/golangci-lint]

jobs:
  build:
    executor:
      name: build
    working_directory: *workspace_root
    steps:
      - checkout
      - install-golangci-lint
      - *restore_cache
      - run: make check-style
      - run: make test
      - run: make build
      - check-uncommitted
      - *save_cache
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  deploy:
    executor:
      name: deploy
    working_directory: *workspace_root
    steps:
      - *attach_workspace
      - run:
          name: Install Serverless CLI and dependencies
          command: sudo npm i -g serverless
      - run:
          name: Deploy Function
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                export AWS_ACCESS_KEY_ID=$AWS_STAGING_ACCESS_KEY_ID
                export AWS_SECRET_ACCESS_KEY=$AWS_STAGING_SECRET_ACCESS_KEY
                sudo -E serverless deploy function -f server --stage staging
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
                export AWS_ACCESS_KEY_ID=$AWS_PRODUCTION_ACCESS_KEY_ID
                export AWS_SECRET_ACCESS_KEY=$AWS_PRODUCTION_SECRET_ACCESS_KEY
                sudo -E serverless deploy function -f server --stage production
            else
                echo "Unexpected branch ${CIRCLE_BRANCH}"
                exit 1
            fi

workflows:
  version: 2
  ci:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - production
